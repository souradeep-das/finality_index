import { createAnvil, } from "../anvil/createAnvil.js";
/**
 * Creates pool of anvil instances.
 */
export function createPool({ instanceLimit, autoPort = true, } = {}) {
    const instances = new Map();
    async function start(id, options) {
        if (instances.has(id)) {
            throw new Error(`Anvil instance with id "${id}" already exists`);
        }
        if (instanceLimit !== undefined && instances.size + 1 > instanceLimit) {
            throw new Error(`Anvil instance limit of ${instanceLimit} reached`);
        }
        // rome-ignore lint/suspicious/noAsyncPromiseExecutor: this is fine ...
        const anvil = new Promise(async (resolve, reject) => {
            try {
                const opts = {
                    ...options,
                    ...(options?.port === undefined && autoPort
                        ? {
                            port: await ((await import("get-port")).default)(),
                        }
                        : {}),
                };
                const instance = createAnvil(opts);
                await instance.start();
                resolve(instance);
            }
            catch (error) {
                reject(error);
            }
        });
        instances.set(id, anvil);
        return anvil;
    }
    async function stop(id) {
        const anvil = instances.get(id);
        if (anvil === undefined) {
            return;
        }
        instances.delete(id);
        // If the anvil instance hasn't even started, we don't attempt to stop it.
        return anvil.catch(() => undefined).then((anvil) => anvil?.stop());
    }
    async function empty() {
        const array = Array.from(instances.keys());
        const result = await Promise.allSettled(array.map((id) => stop(id)));
        if (result.some(({ status }) => status === "rejected")) {
            throw new Error("Failed to gracefully stop some instances");
        }
    }
    return {
        get size() {
            return instances.size;
        },
        instances: () => instances.entries(),
        has: (id) => instances.has(id),
        get: (id) => instances.get(id),
        start,
        stop,
        empty,
    };
}
//# sourceMappingURL=createPool.js.map